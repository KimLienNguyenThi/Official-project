@using WebApp.Responses


@{
    ViewData["Title"] = "GioHang";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h3 style="text-align:center; font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; color:orangered">Thư viện sách của bạn</h3>
@*Nút nhấn xác nhận mượn*@
<nav>
    <div class="container mt-5">
        <div class="row align-items-center justify-content-between border-bottom mb-3">

            <div class="col-1" style="margin-left: 46px;" id="SelectAll">
                <input type="checkbox" class="form-check-input" style="transform:scale(1)">
            </div>

            <div class="col-2" style="margin-left:30px; font-weight:bold"> Sách </div>
            <div class="col-4 text-center" style="font-weight: bold"> Tên sách </div>
            <div class="col-2 text-center" style="font-weight: bold"> Số lượng </div>
            <div class="col-1 text-center" style="margin-right:25px;font-weight: bold"> Thao tác </div>
        </div>
    </div>
</nav>

<!-- Container hiển thị danh sách sách trong giỏ hàng -->
<div id="cartContainer">
    <!-- Nội dung sách sẽ được render tại đây -->
</div>
<!-- Thông tin tổng cộng -->
<nav class="sticky-top fixed-bottom " style="background-color:aliceblue; height:70px;" id="SelectAll">
    <div class="row mt">

        <div class="col-2" style="margin-left:60px; margin-top:27px">
            <input type="checkbox" class="form-check-input" style="transform:scale(1)"><a style="margin-left:10px; font-weight:bold">Chọn tất cả</a>
        </div>
        <div class="col-6">
            <p class="font-weight-bold" style="margin-left:400px; margin-top:30px; font-weight:bold" id="TongSoSachMuon"> Tổng số sách mượn:  </p>
        </div>
        <div class="col-2">
            <button class="btn btn-primary" style="margin-left:50px; margin-top:20px" onclick="DangKyMuon()">Đăng ký mượn</button>
        </div>
    </div>
</nav>

<!-- Modal xác nhận xóa -->
<div class="modal" id="confirmDeleteModal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Xác nhận</h5>
                <button type="button" class="close" data-bs-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body">
                <p>Bạn có chắc chắn muốn xóa sách khỏi giỏ hàng?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Không</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteButton">Có</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal error-->
<div class="modal fade" id="ModalError" tabindex="-1" role="dialog" aria-labelledby="ModalError" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-body text-center bg-danger" style="color: black;">
                <span class="" id="contentModalError"></span>
            </div>
        </div>
    </div>
</div>

<!-- Modal success-->
<div class="modal fade" id="ModalSuccess" tabindex="-1" role="dialog" aria-labelledby="ModalSuccess" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-body text-center" style="background-color: green;color: black;">
                <span class="" id="contentModalSuccess"></span>
            </div>
        </div>
    </div>
</div>



<!-- Bootstrap JS và các script cần thiết -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.min.js"></script>


<!-- Include jQuery -->
<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

<script>
    var currentUserPhone = '@User.FindFirst("PhoneNumber")?.Value';
    function validateInput(event, maxQuantity) {
        // Ngăn chặn nhập ký tự không phải số
        if (!isNumericInput(event)) {
            event.preventDefault();
        }
        // Ngăn chặn nhập 'e' hoặc 'E'
        if (event.key === 'e' || event.key === 'E') {
            event.preventDefault();
        }
        // Kiểm tra giá trị sau khi nhập để đảm bảo nó nằm trong phạm vi cho phép
        let inputValue = event.target.value + event.key;
        if (inputValue < 1 || inputValue > maxQuantity) {
            event.preventDefault();
        }
    }

    function isNumericInput(event) {
        const key = event.key;
        // Chỉ cho phép các phím số từ '0' đến '2', phím Backspace, Delete và các phím mũi tên
        return (key >= '1' && key <= '2') || key === 'Backspace' || key === 'Delete' || key === 'ArrowLeft' || key === 'ArrowRight';
    }

    // Mảng lưu giá trị của các checkbox_Sach được chọn
    var selectedValues = [];

    ////////////////////////// Xử lý checkbox ////////////////////////
    $(document).ready(function () {

        // Xử lý sự kiện khi checkbox "Chọn tất cả" được thay đổi
        $('#SelectAll input[type="checkbox"]').change(function () {
            var tongSoSachMuon = 0;

            console.log('Sự kiện kiểm tra checkboxAll được gọi');

            // Kiểm tra checkbox SelectAll có được nhấn hay không
            var isChecked = $(this).prop('checked');

            if (isChecked) {
                // Cập nhật trạng thái của được chọn của tất cả các checkbox khác
                $('input[type="checkbox"]').not(this).prop('checked', isChecked);

                // Xóa toàn bộ phần tử trong mảng
                selectedValues = [];

                // Duyệt qua tất cả các checkbox và thêm giá trị của những checkbox được chọn vào mảng
                $('.checkbox_Sach').each(function () {
                    if ($(this).prop('checked')) {
                        selectedValues.push($(this).val());
                    }
                });


                // Lặp qua danh sách các ID và lấy giá trị của mỗi input
                selectedValues.forEach(function (id) {
                    // Lấy tham chiếu đến phần tử input theo ID
                    var inputElement = document.getElementById('soLuongSachMuon_' + id);

                    // Kiểm tra xem input có tồn tại không
                    if (inputElement) {
                        // Lấy giá trị của thuộc tính value
                        var giaTri = parseInt(inputElement.value);
                        tongSoSachMuon = tongSoSachMuon + giaTri;
                    }
                });

                var tongSoSach = document.getElementById("TongSoSachMuon");

                // Kiểm tra xem thẻ có tồn tại không
                if (tongSoSach) {
                    // Thay đổi nội dung của thẻ <p>
                    tongSoSach.innerHTML = "Tổng số sách mượn: " + tongSoSachMuon;
                }

            } else {
                selectedValues = [];
                // Cập nhật trạng thái không được chọn của tất cả các checkbox khác
                $('input[type="checkbox"]').not(this).prop('checked', isChecked);
                // Thay đổi nội dung thẻ <p> chứa thông tin tổng số sách được chọn
                var tongSoSachMuon = document.getElementById("TongSoSachMuon");
                if (tongSoSachMuon) {
                    tongSoSachMuon.innerHTML = " Tổng số sách mượn: ";
                }
            }
        });

        // Xử lý sự kiện khi một checkbox được thay đổi trạng thái
        $('.checkbox_Sach').change(function () {
            var tongSoSachMuon = 0;
            console.log('Sự kiện kiểm tra checkbox_Sach được gọi');
            $('#SelectAll input[type="checkbox"]').not(this).prop('checked', false);

            // Kiểm tra xem checkbox có được chọn hay không
            if ($(this).is(':checked')) {

                // Nếu được chọn, thêm giá trị của checkbox vào mảng
                selectedValues.push($(this).val());
                // Kiểm tra danh sách checkbox được chọn
                console.log(selectedValues);

                // Lặp qua danh sách các ID và lấy giá trị của mỗi input
                selectedValues.forEach(function (id) {
                    // Lấy tham chiếu đến phần tử input theo ID
                    var inputElement = document.getElementById('soLuongSachMuon_' + id);

                    // Kiểm tra xem input có tồn tại không
                    if (inputElement) {
                        // Lấy giá trị của thuộc tính value
                        var giaTri = parseInt(inputElement.value);
                        tongSoSachMuon = tongSoSachMuon + giaTri;
                    }
                });

                var tongSoSach = document.getElementById("TongSoSachMuon");

                // Kiểm tra xem thẻ có tồn tại không
                if (tongSoSach) {
                    // Thay đổi nội dung của thẻ <p>
                    tongSoSach.innerHTML = "Tổng số sách mượn: " + tongSoSachMuon;
                }

            } else {
                // Nếu checkbox bị bỏ chọn, loại bỏ giá trị của checkbox khỏi mảng
                var index = selectedValues.indexOf($(this).val());

                if (index !== -1) {
                    selectedValues.splice(index, 1);
                }

                // Lặp qua danh sách các ID và lấy giá trị của mỗi input
                selectedValues.forEach(function (id) {
                    // Lấy tham chiếu đến phần tử input theo ID
                    var inputElement = document.getElementById('soLuongSachMuon_' + id);

                    // Kiểm tra xem input có tồn tại không
                    if (inputElement) {
                        // Lấy giá trị của thuộc tính value
                        var giaTri = parseInt(inputElement.value);
                        tongSoSachMuon = tongSoSachMuon + giaTri;
                    }
                });

                var tongSoSach = document.getElementById("TongSoSachMuon");

                // Kiểm tra xem thẻ có tồn tại không
                if (tongSoSach) {
                    // Thay đổi nội dung của thẻ <p>
                    tongSoSach.innerHTML = "Tổng số sách mượn: " + tongSoSachMuon;
                }

                // Kiểm tra danh sách checkbox được chọn
                console.log(selectedValues);
            }
        });


        $('.sach-input').change(function () {
            var tongSoSachMuon = 0;
            console.log(selectedValues);

            // Lặp qua danh sách các ID và lấy giá trị của mỗi input
            selectedValues.forEach(function (id) {
                // Lấy tham chiếu đến phần tử input theo ID
                var inputElement = document.getElementById('soLuongSachMuon_' + id);
                var SoLuongHienTai = document.getElementById('soLuongHienTai_' + id);

                // Kiểm tra xem input có tồn tại không
                if (inputElement) {
                    console.log("Số lượng hiện tại: " + parseInt(SoLuongHienTai.value));
                    console.log("Số lượng chọn: " + parseInt(inputElement.value));

                    // Kiểm tra xem giá trị có âm không và đặt lại thành 0 nếu cần
                    if (parseInt(inputElement.value) > 1 && parseInt(inputElement.value) <= parseInt(SoLuongHienTai.value)) {
                        // Lấy giá trị của thuộc tính value
                        var giaTri = parseInt(inputElement.value);
                        tongSoSachMuon = tongSoSachMuon + giaTri;
                    } else {
                        inputElement.value = 0;
                        document.getElementById("contentModalError").innerHTML = "Vui lòng chọn giá trị hợp lệ";
                        $("#ModalError").modal("show");
                    }

                }
            });

            var tongSoSach = document.getElementById("TongSoSachMuon");

            // Kiểm tra xem thẻ có tồn tại không
            if (tongSoSach) {
                // Thay đổi nội dung của thẻ <p>
                tongSoSach.innerHTML = "Tổng số sách mượn: " + tongSoSachMuon;
            }
        });

    
 //Load sách từ local 
        const cartContainer = document.getElementById("cartContainer");
       
        if (!cartContainer) {
            console.error("cartContainer not found in DOM!");
            return;
        }

        // Lấy dữ liệu từ localStorage
        const cartKey = "gioHang"; // Tên key trong localStorage
        const cartData = localStorage.getItem(cartKey);

        console.log("Dữ liệu từ localStorage (gioHang):", cartData);

        if (cartData) {
            const parsedData = JSON.parse(cartData); // Chuyển JSON string sang object
            console.log("Dữ liệu sau khi parse:", parsedData);

            // Lọc dữ liệu dựa trên userId
            const phoneNumber = currentUserPhone;
            const userCart = parsedData.filter(item => item.userId === phoneNumber);

            console.log("Dữ liệu giỏ hàng của người dùng theo id(sdt):", userCart);

            if (userCart.length > 0) {
                // Lấy danh sách mã sách (không cần số lượng mượn ở đây)
                const maSachList = userCart.map(item => item.maSach);

                console.log("Danh sách mã sách:", maSachList);

                // Gửi danh sách mã sách lên server để lấy thông tin sách
                fetch('/BorrowBook/LayThongTinSach', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(maSachList) // Gửi chỉ mã sách
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            renderCart(data.data, userCart); // Gửi thêm dữ liệu giỏ hàng (có số lượng mượn) vào hàm render
                            
                        } else {
                            console.error("Failed to fetch cart details:", data.message);
                        }
                    })
                    .catch(error => console.error("Error:", error));
            } else {
                console.warn("Không có sách nào trong giỏ của người dùng:", phoneNumber);
                document.getElementById("cartContainer").innerHTML = `
        <div style="display: flex; flex-direction: column; align-items: center; justify-content: center; height: 100%; color: red;">
            <h3 style="font-style: italic;">Giỏ hàng của bạn đang trống!</h3>
        </div>`;
            }
        } else {
            console.warn("Không tìm thấy key 'gioHang' trong localStorage!");
            document.getElementById("cartContainer").innerHTML = "<p>Giỏ hàng trống!</p>";
        }
    });


    function renderCart(books, userCart) {
        const cartContainer = document.getElementById("cartContainer");
        if (!cartContainer) return;

        cartContainer.innerHTML = ""; // Xóa nội dung cũ

        if (books.length === 0) {
            cartContainer.innerHTML = `<p style="font-style:italic; padding-left:30px">Thư viện của bạn đang trống</p>`;
            return;
        }

        const rowContainer = document.createElement("div");
        rowContainer.classList.add("row", "g-4", "pt-5");

        console.log("Dữ liệu trong userCart:", userCart);
        console.log("Dữ liệu trong books:", books);

        books.forEach(book => {
            // Kiểm tra số lượng mượn từ userCart
            const cartItem = userCart.find(item => String(item.maSach).trim() === String(book.masach).trim());

            if (cartItem) {
                console.log(`Sách: ${book.masach}, Số lượng mượn: ${cartItem.soLuongMuon}`);
            } else {
                console.log(`Không tìm thấy sách: ${book.masach} trong giỏ hàng.`);
            }

            // Lấy số lượng mượn, nếu không có thì mặc định là 0
            const soLuongMuon = cartItem ? cartItem.soLuongMuon : 0;

            const urlImage = book.urlImage.replace("~\\", "/").replace("\\", "/");

            const bookContainer = document.createElement("div");
            bookContainer.classList.add("container", "mt-5");
            bookContainer.id = `sachMuon_${book.masach}`;

            bookContainer.innerHTML = `
            <div class="row align-items-center justify-content-between border-bottom mb-3">
               <div class="col-1" style="margin-left: 60px; margin-bottom: 80px">
                   <input id="checkbox_Sach_${book.masach}" type="checkbox" class="form-check-input checkbox_Sach" style="transform:scale(1)" value="${book.masach}">
               </div>
               <div class="col-2" style="margin-right: 70px; margin-bottom:80px">
                   <img src="${urlImage}" alt="" style="width: 150px; height: 150px;">
               </div>
               <div class="col-4 text-center" style="margin-bottom: 80px">
                   <h4>${book.tensach}</h4>
                   <p>Thể loại: ${book.theloai}</p>
                   <input id="soLuongHienTai_${book.masach}" value="${book.soluonghientai}" hidden>
               </div>
               <div class="col-2 text-center" style="margin-bottom: 80px">
                   <input id="soLuongSachMuon_${book.masach}" type="number" min="0" max="2" value="${soLuongMuon}" class="form-control sach-input" oninput="updateBookQuantity('${book.masach}', this.value)">
               </div>
               <div class="col-1" style="margin-bottom: 80px">
                       <button class="btn btn-danger" onclick="showDeleteModal('${book.masach}')">Xóa</button>
               </div>
            </div>
    `;

            rowContainer.appendChild(bookContainer);
        });

        cartContainer.appendChild(rowContainer);
    }


    document.addEventListener("input", function (event) {
        if (event.target && event.target.classList.contains("sach-input")) {
            const bookMasach = event.target.id.replace("soLuongSachMuon_", "");
            let newQuantity = parseInt(event.target.value, 10);

            if (!isNaN(newQuantity) && newQuantity >= 1 && newQuantity <= 2) {
                // Cập nhật số lượng sách nếu hợp lệ
                updateBookQuantity(bookMasach, newQuantity);
            } else {
                // Hiển thị cảnh báo
                alert("Số lượng sách mượn phải nằm trong khoảng từ 1 đến 2.");

                // Đặt lại giá trị về 1 nếu không hợp lệ
                newQuantity = 1;
                event.target.value = newQuantity;

                // Cập nhật giá trị mặc định vào localStorage
                updateBookQuantity(bookMasach, newQuantity);
            }
        }
    });



    // Hàm cập nhật số lượng sách trong giỏ hàng
    function updateBookQuantity(bookMasach, newQuantity) {
        const cartKey = "gioHang";
        const cartData = localStorage.getItem(cartKey);

        if (cartData) {
            const parsedData = JSON.parse(cartData); // Chuyển JSON string thành object
            const phoneNumber = currentUserPhone;
            const userCart = parsedData.filter(item => item.userId === phoneNumber);

            if (userCart.length > 0) {
                const cartItem = userCart.find(item => String(item.maSach).trim() === String(bookMasach).trim());

                if (cartItem) {
                    // Cập nhật số lượng mượn vào giỏ hàng
                    cartItem.soLuongMuon = parseInt(newQuantity, 10);

                    // Lưu lại giỏ hàng đã cập nhật vào localStorage
                    localStorage.setItem(cartKey, JSON.stringify(parsedData));

                    // Cập nhật giao diện
                    const quantityInput = document.getElementById(`soLuongSachMuon_${bookMasach}`);
                    if (quantityInput) {
                        quantityInput.value = newQuantity;
                    }
                } else {
                    console.warn(`Không tìm thấy sách với mã ${bookMasach} trong giỏ hàng.`);
                }
            } else {
                console.warn("Không có sách nào trong giỏ hàng của người dùng.");
            }
        } else {
            console.warn("Không tìm thấy dữ liệu giỏ hàng trong localStorage.");
        }
    }

    function showDeleteModal(maSach) {
        window.bookMasach = maSach; // Lưu mã sách cần xóa
        $('#confirmDeleteModal').modal('show'); // Hiển thị modal xác nhận
    }
   
    document.getElementById('confirmDeleteButton').addEventListener('click', function () {
        if (window.bookMasach) {
            deleteBookFromCart(window.bookMasach); // Gọi hàm xóa sách
            $('#confirmDeleteModal').modal('hide'); // Ẩn modal
        }
    });

    function deleteBookFromCart(maSach) {
        const cartKey = "gioHang";
        const cartData = localStorage.getItem(cartKey);

        if (cartData) {
            const parsedData = JSON.parse(cartData);
            const phoneNumber = currentUserPhone;

            // Lọc bỏ sách cần xóa khỏi giỏ hàng của người dùng
            const updatedParsedData = parsedData.filter(item => item.userId !== phoneNumber || item.maSach !== maSach);

            // Cập nhật lại localStorage
            localStorage.setItem(cartKey, JSON.stringify(updatedParsedData));

            // Xóa sách khỏi giao diện
            const bookContainer = document.getElementById(`sachMuon_${maSach}`);
            if (bookContainer) {
                bookContainer.remove();
            }

            // Kiểm tra nếu giỏ hàng trống
            const userCart = updatedParsedData.filter(item => item.userId === phoneNumber);
            if (userCart.length === 0) {
                const cartContainer = document.getElementById("cartContainer");
                if (cartContainer) {
                    cartContainer.innerHTML = `
            <div style="display: flex; flex-direction: column; align-items: center; justify-content: center; height: 100%; color: red;">
                <h3 style="font-style: italic;">Giỏ hàng của bạn đang trống!</h3>
            </div>`;
                }
            }

            console.log(`Sách ${maSach} đã được xóa khỏi giỏ hàng.`);
        } else {
            console.warn("Không tìm thấy dữ liệu giỏ hàng trong localStorage.");
        }
    }

    


</script>
